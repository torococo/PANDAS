numpy{ 
  ndarray{
    properties{
      shape tuple (dimensions)
      dtype{
        normal{
          [int8,16,32,64][uint8,16,32,64][float16,32,64,128][complex64,128,256][bool][object][string_][unicode_]
          string and unicode have a number after denoting max length in bytes/chars
        }
        abbreviated{
          [i1,2,4][u1,2,4][f2,f4(or f),f8(or d),f16(or g)][c8,16,32][?][O][S_][U_]
        }
      }
    }
    functions{
      constructors{
        array(sequence-like object){
          produces a new ndarray
          nested produces multidimensional
        }
        asarray(sequence-like-object){
          converts to ndarray, but if already is an ndarray, does not change
        }
        copy{
          creates separate array copy (not a view)
        }
        zeros,ones,eye,empty{
          creates arrays of all zeros/ones/identity/uninitialized
        }
        arange(int){similar to range in python, creates range of numbers}
        ones_like/zeros_like/empty_like{
          produces an array of ones/zeros that is of same dims as arg
        }
        astype{
          converts from one dtype to another
          ALWAYS returns new array, even if type is same
        }
      }
      operations{
        elementwise{
          +,-,*,/,**,mod works for scalars
          can also do elementwise boolean comparisons, returns a boolean array
          unary ufuncs{
            perform elementwise ops on data in ndarrays
            sqrt,exp,abs/fabs,exp,log,sign,ceil,floor,rint,isnan,isfinite,isinf,-(logical not)
            sin,cos,tan,sinh,cosh,tanh,arccos,...
          }
          binary ufuncs{
            takes 2 arrays, elementwise ops
            +,-,*,/,floor_divide,**,maximum,fmax,minimum,fmin,mod,modf,copysign,>,<,&,|,^...(logical operators)
          }
        }
        reductions{
          mean,sum,std,(can give optional axis arg),any,all
        }
        Special cases{
          cumsum(axis),cumprod(axis) do cumulative functions along give axis
          arr.sort() sorts in place, np.sort(arr) returns sorted copy
          where(cond,ifTrue,ifFalse)
          Set functions{
            unique() returns sorted array of all unique elems
            intersect1d(x,y),union1d(x,y),setdiff1d(x,y),setxor1d(x,y)
            in1d(x,y) boolean array saying if each elem of x is contained in y
          }
        }
      }
      indexing/slicing{
        basics{
          NOTE{slices are just views, not copies!}
          each element is its own array
          arr[2] gets 3rd subarray
          arr[2][0]/arr[2,0] gets first elem of 3rd subarray
          slices work by same analog as access, 
        }
        can use boolean array for slicing as well{
          always returns new array
          can set with boolean arrays as well{
            data[data<5]=0 will set all values < 5 to 0
          }
        }
        fancy{
          arr[[3,2,1,4]]gets subarrays 3,2,1,4 as new array
          arr[[1,2,3],[1,2,3]]gets diagonal elements, basically
          arr[np.ix_([i1,i2...],[j1,j2...])] gets matrix formed by selecting those rows and columns
          always returns new array
        }
        reshape{
          reshapes. contiguous elements go in first dimension, with second dimension subarrays
        }
        transpose{
          can use either .transpose() or .T
          swapaxes can be used for higher dimensional transposing
        }
      }
      saving/loading{
        np.save,np.load
        saves with .npy extension
        np.savez('name.npz',a=arr1,b=arr2) pass arrays as key word arguments
        key word args used to get values out of dict created when loading
        np.savetxt,np.loadtxt,np.genfromtxt
      }
      linear algebra{
        dot,inv,diag,trace,det,eig,inv,pinv,qr,svd,solve,lstsq
      }
      random{
        normal(dist),seed,permutation,shuffle,rand,randint,binomial,beta,chisquare,gamma,uniform

      }
    }
  }
}




pandas{ 
  imports{
    from pandas import Series,DataFrame
    import pandas as pd
  }
  SeriesAndDataFrames{
    Hierarchical Indexing{
      set_index([col/cols]) creates new dataframe with current indices swaped for col values
      reset_index undoes this
      index in 2 layers index=[[layer1],[layer2]]
      can also use stack()/unstack() to make headers inner index
      swaplevel(key1,key2) will swap level ordering/indexing
      sortlevel(key) sorts on key (sortlevel(0)=sort_index()) 
      efficient to have outer level sorted
    }
    functions{
      reindex([],method){ returns reindexed version, 
        reindex(columns=[],method) reindexes columns
          fills(with NaNs in missing positions by default)
          methods{
            ffill/pad will carry values forward
            bfill/backfill will carry values backward
          }
        fill_value arg substitutes something else instead of NaN
        .ix also works here
      }
      obj.drop[keys]{
        removes indices/cols from object
      }
      math operations{
        similar to numpy arrays, but will line up differently indexed data for math operations
        NaNs get filled in for non-matching pairs
        add,sub,div,mul can have fill_value field included
        +,-,/,*
        broadcasting is done with rows or values
        broadcasting also applies with DataFrames and Series
      }
      Summary Statistics{
        count,describe(computes set of summary stats),min,max,argmin,argmax(extreme index ints),
          idxmin,idxmax(extreme index labels),quantile([cutpoints 0-1]),sum,mean,median,mad,var,
          std,skew,kurt,cumsum,cummin,cummax,cumprod,diff,pct_change
          corr,cov(can compute full matrix or for specific columns)
          corrwith(Series)compare all columns of DataFrame with one column
      }
      UniqueValues{
        unique() gives array of all unique values in series
        value_counts() gives counts of times each value appears
        isin([valueset]) creates boolean mask of all values that match
      }
      Sorting{
        sort_index(axis=0,ascending=True){
          sorts by index(0)/columns(1)
        }
        sort_value
        order()
      }
      Ranking{
        rank(axis=0,method='average') produces a rank number for each entry, looking at each col by default
        average,min,max,first are the methods
      }
      Missing Data{
        dropna,fillna,isnull,notnull
      }
    }
  }
  Series{
    properties{
      names{
        both the series and index have names, which can be set with:
        obj.name='name',obj.index.name='name2'
      }
      index{
        array of associated labels for each entry of series
        defaults to an array [0...N-1]
      }
    }
    constructors{
      Series([data],[indices])
      Series({dict}) will autosort keys
      Series(prevSeries,[new indices]) will create a new series from the prev w new indices, missing values will be NaN
    }
    operations{
      indexing{
        iget_value used for integer indexing
        can use dict notation with index
        numpy array slicing/indexing operations also work, label slicing is always inclusive
        can also use dot notation for index
        can index on boolean eval, will return Sequence of all elems that evaluated to true
      }
      .str{
        allows calling vectorized string functions on the series
      }
    }
  }
  DataFrames{
    properties{
      columns are names of columns
      .columns gets the columns
      index are names of rows
      .index gets row names
      2D array of data
      indices and columns can also have name attributes
      .shape gets dimension sizes
    }
    constructors{
      DataFrame({'a':[1,2,3],'b':['i','j','k']}) with dict
      Array, default columns and indices will be numbers starting at 0
      dict of dicts, dict of Series, first set of keys will be cols, second set will be indices, values become cols
      list of Series: values become rows, indices become column headers
    }
    indexing/slicing{
      get_value(row,col)
      columns{
        icol for integer indexing
        ditionary or dot notation
      }
      rows{
        irow for iteger indexing
        .ix used to get row based on index
        .ix[[rows],[cols]] can be used for reindexing
        can get rows for which boolean function evals to true with condition in []
        can ues boolean eval for assignment as well
      }
    }
    assignment{
      set_value(row,col)
      single value to column (which will duplicate for each row)
      range of values can also be used (must have correct number of entries)
    }
    deletion{
      del frame['col']
    }
  }
  Panels{
    for when 2 dimensions just arent enough
    ix works in 3d like it did in 2d
    to_frame() can turn an item into its own DataFrame
    to_panel() coverts a DataFrame to a panel
  }
  Index{
    immutable, automatically generated by dataframes and series. hold axis labels
    functions{
      (returns new index)append,diff,intersection,union,delete,drop,insert,unique
      (returns bool)isin,is_monotonic,is_unique
    }
  }
  Functions{
    isnull,notnoull used to check for nulls
  }
  IO{
    Pickling{
      save('obj.pl')
      load('obj.pl')
    }
    Reading{
      read_csv{identical to read_table(sep=',')},read_table(sep='\t'),
        readd_fwf(fixed width column format, no delimit),read_clipboard
      auto type inference
      options{
        header=None{default column headers}
        names=[...]
        index_col=index/[indices] creates custom indices
        skiprows=[indices] will ignore certain rows from the data
      }
      JSON/XML/HTML: use default python libs
    }
    Writing{
      to_csv(path,sep=','){sys.stdout can be used as a path}
      options{
        na_rep="" empty by default, can put in NULL or something
        index=True (writes in indices and headers by default)
        header=True
        cols=[col1...] only writes given columns
      }
    }
  }
}
matplotlib{
  produces 2d plots and visualizations
}
IPython{
  (may not be necissary)
}
SciPy{
  numpy and scipy work together to cover most standard scientific computing issues
}

builtin to python{
  (defaultdict(type)){
    pass in a type, like list or int, to create an empty dict whose values are of that type. whenever a new key/value pair is given, the defaultdict will automatically create/append
  }
}
